#!/usr/bin/env python

import argparse
import subprocess

from oca_projects import OCA_REPOSITORY_NAMES, url
from create_pull_request import create_pull_request
import os

def run_output(l, cwd=None):
    #log("run_output",l)
    #print "run output:", ' '.join( l ), "into", cwd
    return subprocess.Popen(l, stdout=subprocess.PIPE, cwd=cwd).communicate()[0]


def clone(organization_remotes=None):
    for project in OCA_REPOSITORY_NAMES:
        cmd = ['git', 'clone', url(project), project]
        subprocess.call(cmd)

        if organization_remotes:
            for organization_remote in organization_remotes.split(','):
                cmd = ['git', '--git-dir=' + os.path.join(project, '.git'),
                       'remote', 'add', organization_remote,
                       url(project, org_name=organization_remote)]
                subprocess.call(cmd)

                cmd = ['git', '--git-dir=' + os.path.join(project, '.git'),
                       'fetch', organization_remote]
                subprocess.call(cmd)

                branch = '7.0'
                suffix_branch = 'autofix-script-01-dev-moylop260'
                branch_new = branch + '-' + suffix_branch
                commit_msg = '[REF] auto-fix conventions'
                main_project = 'oca'

                #cmd = ['git', 'branch', '-D', branch_new]
                #subprocess.call(cmd)

                cmd = ['git', '--git-dir=' + os.path.join(project, '.git'),
                       '--work-tree=' + project,
                       'checkout', '-b', '%s' % (branch_new),
                       '--track', '%s/%s' % (main_project, branch)]
                subprocess.call(cmd)

                if not os.path.isdir(os.path.join(project, '.git')):
                    msg = project + ' dont have .git folder'
                    open("error.log", "a").write(msg)
                    continue


                cmd = ['git', 'stash']
                run_output(cmd, cwd=project)

                cmd = ['git', 'diff']
                diff = run_output(cmd, cwd=project)
                if diff:
                    msg = project + ' has a diff before of'\
                          ' run auto-fix script.'
                    open("error.log", "a").write(msg)
                    continue

                cmd = [
                    '/Users/moylop260/openerp/instancias/odoo_git_clone/'
                    'community-addons/pylint-conf/fix_unused_imports/'
                    'replace_import.py', project, 'all'
                ]
                subprocess.call(cmd)

                cmd = ['git', 'diff']
                diff = run_output(cmd, cwd=project)
                if diff:
                    cmd = ['git', 'commit', '-am', commit_msg]
                    #import pdb;pdb.set_trace()
                    run_output(cmd, cwd=project)

                    cmd = ['git', '--git-dir=' + os.path.join(project, '.git'),
                           'push',
                           #'-f',
                           organization_remote, branch_new]
                    subprocess.call(cmd)
                repo_base = url(project_name=project, protocol='https', org_name='OCA').replace('.git', '')
                branch_base = branch

                branch_dest = organization_remote + ':' + branch_new
                title = commit_msg
                comment = None
                res_pr = create_pull_request(repo_base, branch_base, branch_dest, title, comment)
                print "res_pr", res_pr
                print "branch_dest", branch_dest
                #import pdb;pdb.set_trace()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--organization-remotes", dest="org_remotes",
                        help="Specify additional remote to add"
                        " (separated by commas).\n"
                        "This is used after of clone, add organization"
                        " remote into git branch cloned",
                        nargs=1, default=None)
    args = parser.parse_args()
    org_remotes = args.org_remotes and args.org_remotes[0] or None
    clone(organization_remotes=org_remotes)

if __name__ == '__main__':
    main()
